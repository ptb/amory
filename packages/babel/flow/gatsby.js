const apiRunnerNode=require(`./api-runner-node`);const{store}=require(`../redux`);const buildConfig=(abstractConfig,stage)=>{let babelrc={...abstractConfig.options,presets:[],plugins:[]};abstractConfig.presets.forEach(p=>babelrc.presets.push([require.resolve(p.name),p.options]));abstractConfig.plugins.forEach(p=>babelrc.plugins.push([require.resolve(p.name),p.options]));if(!babelrc.hasOwnProperty(`cacheDirectory`)){babelrc.cacheDirectory=true}if(stage===`develop`){babelrc.plugins.unshift(require.resolve(`react-hot-loader/babel`))}if(stage===`build-html`||stage===`develop-html`){babelrc.plugins.unshift(require.resolve(`babel-plugin-dynamic-import-node`))}babelrc.plugins.unshift(require.resolve(`babel-plugin-remove-graphql-queries`));return babelrc};exports.buildConfig=buildConfig;exports.createBabelConfig=async function babelConfig(program,stage){await apiRunnerNode(`onCreateBabelConfig`,{stage});const babelrcState=store.getState().babelrc;let babelrc=buildConfig(babelrcState.stages[stage],stage);return babelrc};