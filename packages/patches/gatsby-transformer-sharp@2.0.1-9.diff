--- node_modules/gatsby-transformer-sharp/extend-node-type.js
+++ node_modules/gatsby-transformer-sharp/extend-node-type.js
@@ -4,16 +4,16 @@
 
 var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
 
+require("core-js/modules/es6.function.name");
+
 const Promise = require(`bluebird`);
 
 const _require = require(`graphql`),
       GraphQLObjectType = _require.GraphQLObjectType,
-      GraphQLInputObjectType = _require.GraphQLInputObjectType,
       GraphQLBoolean = _require.GraphQLBoolean,
       GraphQLString = _require.GraphQLString,
       GraphQLInt = _require.GraphQLInt,
-      GraphQLFloat = _require.GraphQLFloat,
-      GraphQLEnumType = _require.GraphQLEnumType;
+      GraphQLFloat = _require.GraphQLFloat;
 
 const _require2 = require(`gatsby-plugin-sharp`),
       queueImageResizing = _require2.queueImageResizing,
@@ -32,135 +32,11 @@
 
 const path = require(`path`);
 
-const Potrace = require(`potrace`).Potrace;
-
-const ImageFormatType = new GraphQLEnumType({
-  name: `ImageFormat`,
-  values: {
-    NO_CHANGE: {
-      value: ``
-    },
-    JPG: {
-      value: `jpg`
-    },
-    PNG: {
-      value: `png`
-    },
-    WEBP: {
-      value: `webp`
-    }
-  }
-});
-const ImageCropFocusType = new GraphQLEnumType({
-  name: `ImageCropFocus`,
-  values: {
-    CENTER: {
-      value: sharp.gravity.center
-    },
-    NORTH: {
-      value: sharp.gravity.north
-    },
-    NORTHEAST: {
-      value: sharp.gravity.northeast
-    },
-    EAST: {
-      value: sharp.gravity.east
-    },
-    SOUTHEAST: {
-      value: sharp.gravity.southeast
-    },
-    SOUTH: {
-      value: sharp.gravity.south
-    },
-    SOUTHWEST: {
-      value: sharp.gravity.southwest
-    },
-    WEST: {
-      value: sharp.gravity.west
-    },
-    NORTHWEST: {
-      value: sharp.gravity.northwest
-    },
-    ENTROPY: {
-      value: sharp.strategy.entropy
-    },
-    ATTENTION: {
-      value: sharp.strategy.attention
-    }
-  }
-});
-const DuotoneGradientType = new GraphQLInputObjectType({
-  name: `DuotoneGradient`,
-  fields: () => {
-    return {
-      highlight: {
-        type: GraphQLString
-      },
-      shadow: {
-        type: GraphQLString
-      },
-      opacity: {
-        type: GraphQLInt
-      }
-    };
-  }
-});
-const PotraceType = new GraphQLInputObjectType({
-  name: `Potrace`,
-  fields: () => {
-    return {
-      turnPolicy: {
-        type: new GraphQLEnumType({
-          name: `PotraceTurnPolicy`,
-          values: {
-            TURNPOLICY_BLACK: {
-              value: Potrace.TURNPOLICY_BLACK
-            },
-            TURNPOLICY_WHITE: {
-              value: Potrace.TURNPOLICY_WHITE
-            },
-            TURNPOLICY_LEFT: {
-              value: Potrace.TURNPOLICY_LEFT
-            },
-            TURNPOLICY_RIGHT: {
-              value: Potrace.TURNPOLICY_RIGHT
-            },
-            TURNPOLICY_MINORITY: {
-              value: Potrace.TURNPOLICY_MINORITY
-            },
-            TURNPOLICY_MAJORITY: {
-              value: Potrace.TURNPOLICY_MAJORITY
-            }
-          }
-        })
-      },
-      turdSize: {
-        type: GraphQLFloat
-      },
-      alphaMax: {
-        type: GraphQLFloat
-      },
-      optCurve: {
-        type: GraphQLBoolean
-      },
-      optTolerance: {
-        type: GraphQLFloat
-      },
-      threshold: {
-        type: GraphQLInt
-      },
-      blackOnWhite: {
-        type: GraphQLBoolean
-      },
-      color: {
-        type: GraphQLString
-      },
-      background: {
-        type: GraphQLString
-      }
-    };
-  }
-});
+const _require3 = require(`./types`),
+      ImageFormatType = _require3.ImageFormatType,
+      ImageCropFocusType = _require3.ImageCropFocusType,
+      DuotoneGradientType = _require3.DuotoneGradientType,
+      PotraceType = _require3.PotraceType;
 
 function toArray(buf) {
   var arr = new Array(buf.length);
--- /dev/null
+++ node_modules/gatsby-transformer-sharp/types.js
@@ -0,0 +1,148 @@
+"use strict";
+
+const _require = require(`graphql`),
+      GraphQLInputObjectType = _require.GraphQLInputObjectType,
+      GraphQLBoolean = _require.GraphQLBoolean,
+      GraphQLString = _require.GraphQLString,
+      GraphQLInt = _require.GraphQLInt,
+      GraphQLFloat = _require.GraphQLFloat,
+      GraphQLEnumType = _require.GraphQLEnumType;
+
+const sharp = require(`sharp`);
+
+const _require2 = require(`potrace`),
+      Potrace = _require2.Potrace;
+
+const ImageFormatType = new GraphQLEnumType({
+  name: `ImageFormat`,
+  values: {
+    NO_CHANGE: {
+      value: ``
+    },
+    JPG: {
+      value: `jpg`
+    },
+    PNG: {
+      value: `png`
+    },
+    WEBP: {
+      value: `webp`
+    }
+  }
+});
+const ImageCropFocusType = new GraphQLEnumType({
+  name: `ImageCropFocus`,
+  values: {
+    CENTER: {
+      value: sharp.gravity.center
+    },
+    NORTH: {
+      value: sharp.gravity.north
+    },
+    NORTHEAST: {
+      value: sharp.gravity.northeast
+    },
+    EAST: {
+      value: sharp.gravity.east
+    },
+    SOUTHEAST: {
+      value: sharp.gravity.southeast
+    },
+    SOUTH: {
+      value: sharp.gravity.south
+    },
+    SOUTHWEST: {
+      value: sharp.gravity.southwest
+    },
+    WEST: {
+      value: sharp.gravity.west
+    },
+    NORTHWEST: {
+      value: sharp.gravity.northwest
+    },
+    ENTROPY: {
+      value: sharp.strategy.entropy
+    },
+    ATTENTION: {
+      value: sharp.strategy.attention
+    }
+  }
+});
+const DuotoneGradientType = new GraphQLInputObjectType({
+  name: `DuotoneGradient`,
+  fields: () => {
+    return {
+      highlight: {
+        type: GraphQLString
+      },
+      shadow: {
+        type: GraphQLString
+      },
+      opacity: {
+        type: GraphQLInt
+      }
+    };
+  }
+});
+const PotraceType = new GraphQLInputObjectType({
+  name: `Potrace`,
+  fields: () => {
+    return {
+      turnPolicy: {
+        type: new GraphQLEnumType({
+          name: `PotraceTurnPolicy`,
+          values: {
+            TURNPOLICY_BLACK: {
+              value: Potrace.TURNPOLICY_BLACK
+            },
+            TURNPOLICY_WHITE: {
+              value: Potrace.TURNPOLICY_WHITE
+            },
+            TURNPOLICY_LEFT: {
+              value: Potrace.TURNPOLICY_LEFT
+            },
+            TURNPOLICY_RIGHT: {
+              value: Potrace.TURNPOLICY_RIGHT
+            },
+            TURNPOLICY_MINORITY: {
+              value: Potrace.TURNPOLICY_MINORITY
+            },
+            TURNPOLICY_MAJORITY: {
+              value: Potrace.TURNPOLICY_MAJORITY
+            }
+          }
+        })
+      },
+      turdSize: {
+        type: GraphQLFloat
+      },
+      alphaMax: {
+        type: GraphQLFloat
+      },
+      optCurve: {
+        type: GraphQLBoolean
+      },
+      optTolerance: {
+        type: GraphQLFloat
+      },
+      threshold: {
+        type: GraphQLInt
+      },
+      blackOnWhite: {
+        type: GraphQLBoolean
+      },
+      color: {
+        type: GraphQLString
+      },
+      background: {
+        type: GraphQLString
+      }
+    };
+  }
+});
+module.exports = {
+  ImageFormatType,
+  ImageCropFocusType,
+  DuotoneGradientType,
+  PotraceType
+};
--- node_modules/gatsby-transformer-sharp/src/extend-node-type.js
+++ node_modules/gatsby-transformer-sharp/src/extend-node-type.js
@@ -1,12 +1,10 @@
 const Promise = require(`bluebird`)
 const {
   GraphQLObjectType,
-  GraphQLInputObjectType,
   GraphQLBoolean,
   GraphQLString,
   GraphQLInt,
   GraphQLFloat,
-  GraphQLEnumType,
 } = require(`graphql`)
 const {
   queueImageResizing,
@@ -21,74 +19,13 @@
 const fsExtra = require(`fs-extra`)
 const imageSize = require(`probe-image-size`)
 const path = require(`path`)
-const Potrace = require(`potrace`).Potrace
 
-const ImageFormatType = new GraphQLEnumType({
-  name: `ImageFormat`,
-  values: {
-    NO_CHANGE: { value: `` },
-    JPG: { value: `jpg` },
-    PNG: { value: `png` },
-    WEBP: { value: `webp` },
-  },
-})
-
-const ImageCropFocusType = new GraphQLEnumType({
-  name: `ImageCropFocus`,
-  values: {
-    CENTER: { value: sharp.gravity.center },
-    NORTH: { value: sharp.gravity.north },
-    NORTHEAST: { value: sharp.gravity.northeast },
-    EAST: { value: sharp.gravity.east },
-    SOUTHEAST: { value: sharp.gravity.southeast },
-    SOUTH: { value: sharp.gravity.south },
-    SOUTHWEST: { value: sharp.gravity.southwest },
-    WEST: { value: sharp.gravity.west },
-    NORTHWEST: { value: sharp.gravity.northwest },
-    ENTROPY: { value: sharp.strategy.entropy },
-    ATTENTION: { value: sharp.strategy.attention },
-  },
-})
-
-const DuotoneGradientType = new GraphQLInputObjectType({
-  name: `DuotoneGradient`,
-  fields: () => {
-    return {
-      highlight: { type: GraphQLString },
-      shadow: { type: GraphQLString },
-      opacity: { type: GraphQLInt },
-    }
-  },
-})
-
-const PotraceType = new GraphQLInputObjectType({
-  name: `Potrace`,
-  fields: () => {
-    return {
-      turnPolicy: {
-        type: new GraphQLEnumType({
-          name: `PotraceTurnPolicy`,
-          values: {
-            TURNPOLICY_BLACK: { value: Potrace.TURNPOLICY_BLACK },
-            TURNPOLICY_WHITE: { value: Potrace.TURNPOLICY_WHITE },
-            TURNPOLICY_LEFT: { value: Potrace.TURNPOLICY_LEFT },
-            TURNPOLICY_RIGHT: { value: Potrace.TURNPOLICY_RIGHT },
-            TURNPOLICY_MINORITY: { value: Potrace.TURNPOLICY_MINORITY },
-            TURNPOLICY_MAJORITY: { value: Potrace.TURNPOLICY_MAJORITY },
-          },
-        }),
-      },
-      turdSize: { type: GraphQLFloat },
-      alphaMax: { type: GraphQLFloat },
-      optCurve: { type: GraphQLBoolean },
-      optTolerance: { type: GraphQLFloat },
-      threshold: { type: GraphQLInt },
-      blackOnWhite: { type: GraphQLBoolean },
-      color: { type: GraphQLString },
-      background: { type: GraphQLString },
-    }
-  },
-})
+const {
+  ImageFormatType,
+  ImageCropFocusType,
+  DuotoneGradientType,
+  PotraceType,
+} = require(`./types`)
 
 function toArray(buf) {
   var arr = new Array(buf.length)
--- /dev/null
+++ node_modules/gatsby-transformer-sharp/src/types.js
@@ -0,0 +1,84 @@
+const {
+  GraphQLInputObjectType,
+  GraphQLBoolean,
+  GraphQLString,
+  GraphQLInt,
+  GraphQLFloat,
+  GraphQLEnumType,
+} = require(`graphql`)
+const sharp = require(`sharp`)
+const { Potrace } = require(`potrace`)
+
+const ImageFormatType = new GraphQLEnumType({
+  name: `ImageFormat`,
+  values: {
+    NO_CHANGE: { value: `` },
+    JPG: { value: `jpg` },
+    PNG: { value: `png` },
+    WEBP: { value: `webp` },
+  },
+})
+
+const ImageCropFocusType = new GraphQLEnumType({
+  name: `ImageCropFocus`,
+  values: {
+    CENTER: { value: sharp.gravity.center },
+    NORTH: { value: sharp.gravity.north },
+    NORTHEAST: { value: sharp.gravity.northeast },
+    EAST: { value: sharp.gravity.east },
+    SOUTHEAST: { value: sharp.gravity.southeast },
+    SOUTH: { value: sharp.gravity.south },
+    SOUTHWEST: { value: sharp.gravity.southwest },
+    WEST: { value: sharp.gravity.west },
+    NORTHWEST: { value: sharp.gravity.northwest },
+    ENTROPY: { value: sharp.strategy.entropy },
+    ATTENTION: { value: sharp.strategy.attention },
+  },
+})
+
+const DuotoneGradientType = new GraphQLInputObjectType({
+  name: `DuotoneGradient`,
+  fields: () => {
+    return {
+      highlight: { type: GraphQLString },
+      shadow: { type: GraphQLString },
+      opacity: { type: GraphQLInt },
+    }
+  },
+})
+
+const PotraceType = new GraphQLInputObjectType({
+  name: `Potrace`,
+  fields: () => {
+    return {
+      turnPolicy: {
+        type: new GraphQLEnumType({
+          name: `PotraceTurnPolicy`,
+          values: {
+            TURNPOLICY_BLACK: { value: Potrace.TURNPOLICY_BLACK },
+            TURNPOLICY_WHITE: { value: Potrace.TURNPOLICY_WHITE },
+            TURNPOLICY_LEFT: { value: Potrace.TURNPOLICY_LEFT },
+            TURNPOLICY_RIGHT: { value: Potrace.TURNPOLICY_RIGHT },
+            TURNPOLICY_MINORITY: { value: Potrace.TURNPOLICY_MINORITY },
+            TURNPOLICY_MAJORITY: { value: Potrace.TURNPOLICY_MAJORITY },
+          },
+        }),
+      },
+      turdSize: { type: GraphQLFloat },
+      alphaMax: { type: GraphQLFloat },
+      optCurve: { type: GraphQLBoolean },
+      optTolerance: { type: GraphQLFloat },
+      threshold: { type: GraphQLInt },
+      blackOnWhite: { type: GraphQLBoolean },
+      color: { type: GraphQLString },
+      background: { type: GraphQLString },
+    }
+  },
+})
+
+module.exports = {
+  ImageFormatType,
+  ImageCropFocusType,
+  DuotoneGradientType,
+  PotraceType,
+}
