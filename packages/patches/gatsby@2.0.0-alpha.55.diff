--- node_modules/gatsby/cache-dir/app.js
+++ node_modules/gatsby/cache-dir/app.js
@@ -57,7 +57,7 @@
     });
   }
 
-  var rootElement = document.getElementById("___gatsby");
+  var rootElement = document.getElementById("root");
 
   var Root = require("./root");
 
--- node_modules/gatsby/cache-dir/default-html.js
+++ node_modules/gatsby/cache-dir/default-html.js
@@ -22,7 +22,7 @@
 
   _proto.render = function render() {
     return _react.default.createElement("html", this.props.htmlAttributes, _react.default.createElement("head", null, _react.default.createElement("meta", {
-      charSet: "utf-8"
+      charset: "utf-8"
     }), _react.default.createElement("meta", {
       httpEquiv: "x-ua-compatible",
       content: "ie=edge"
@@ -31,7 +31,7 @@
       content: "width=device-width, initial-scale=1, shrink-to-fit=no"
     }), this.props.headComponents), _react.default.createElement("body", this.props.bodyAttributes, this.props.preBodyComponents, _react.default.createElement("div", {
       key: "body",
-      id: "___gatsby",
+      id: "root",
       dangerouslySetInnerHTML: {
         __html: this.props.body
       }
--- node_modules/gatsby/cache-dir/develop-static-entry.js
+++ node_modules/gatsby/cache-dir/develop-static-entry.js
@@ -42,7 +42,7 @@
 
 var _default = function _default(pagePath, callback) {
   var headComponents = [];
-  var htmlAttributes = {};
+  var htmlAttributes = {"lang": "en", "xmlns": "http://www.w3.org/1999/xhtml"};
   var bodyAttributes = {};
   var preBodyComponents = [];
   var postBodyComponents = [];
@@ -87,15 +87,11 @@
     headComponents: headComponents.concat([_react.default.createElement("script", {
       key: "io",
       src: "/socket.io/socket.io.js"
-    }), _react.default.createElement("link", {
-      key: "style",
-      rel: "stylesheet",
-      href: "/commons.css"
     })]),
     preBodyComponents: preBodyComponents,
     postBodyComponents: postBodyComponents.concat([_react.default.createElement("script", {
       key: "commons",
-      src: "/commons.js"
+      src: "/js/commons.js"
     })])
   }));
 
--- node_modules/gatsby/cache-dir/loader.js
+++ node_modules/gatsby/cache-dir/loader.js
@@ -65,7 +65,7 @@
   // Find resource
   var resourceFunction;
 
-  if (resourceName.slice(0, 12) === "component---") {
+  if (resourceName.slice(0, 4) === "c/c-") {
     resourceFunction = asyncRequires.components[resourceName];
   } else {
     resourceFunction = function resourceFunction() {
@@ -73,7 +73,7 @@
         if (resourceName in jsonStore) {
           resolve(jsonStore[resourceName]);
         } else {
-          var url = __PATH_PREFIX__ + "/static/d/" + jsonDataPaths[resourceName] + ".json";
+          var url = __PATH_PREFIX__ + "/js/p/" + jsonDataPaths[resourceName] + ".json";
           var req = new XMLHttpRequest();
           req.open("GET", url, true);
           req.withCredentials = true;
--- node_modules/gatsby/cache-dir/production-app.js
+++ node_modules/gatsby/cache-dir/production-app.js
@@ -212,7 +212,7 @@
     }, Root)[0];
     var renderer = (0, _apiRunnerBrowser.apiRunner)("replaceHydrateFunction", undefined, _reactDom.default.hydrate)[0];
     (0, _domready.default)(function () {
-      renderer(_react.default.createElement(NewRoot, null), typeof window !== "undefined" ? document.getElementById("___gatsby") : void 0, function () {
+      renderer(_react.default.createElement(NewRoot, null), typeof window !== "undefined" ? document.getElementById("root") : void 0, function () {
         (0, _apiRunnerBrowser.apiRunner)("onInitialClientRender");
       });
     });
--- node_modules/gatsby/cache-dir/root.js
+++ node_modules/gatsby/cache-dir/root.js
@@ -36,7 +36,7 @@
 // Report runtime errors
 ErrorOverlay.startReportingRuntimeErrors({
   onError: function onError() {},
-  filename: "/commons.js"
+  filename: "/js/commons.js"
 });
 ErrorOverlay.setEditorHandler(function (errorLocation) {
   return window.fetch("/__open-stack-frame-in-editor?fileName=" + window.encodeURIComponent(errorLocation.fileName) + "&lineNumber=" + window.encodeURIComponent(errorLocation.lineNumber || 1));
--- node_modules/gatsby/cache-dir/static-entry.js
+++ node_modules/gatsby/cache-dir/static-entry.js
@@ -38,7 +38,7 @@
     dataPaths = _require5.dataPaths,
     pages = _require5.pages;
 
-var stats = JSON.parse(fs.readFileSync(process.cwd() + "/public/webpack.stats.json", "utf-8")); // const testRequireError = require("./test-require-error")
+var stats = JSON.parse(fs.readFileSync(process.cwd() + "/public/js/webpack.stats.json", "utf-8")); // const testRequireError = require("./test-require-error")
 // For some extremely mysterious reason, webpack adds the above module *after*
 // this module so that when this code runs, testRequireError is undefined.
 // So in the meantime, we'll just inline it.
@@ -89,7 +89,7 @@
   var pathPrefix = __PATH_PREFIX__ + "/";
   var bodyHtml = "";
   var headComponents = [];
-  var htmlAttributes = {};
+  var htmlAttributes = {"lang": "en", "xmlns": "http://www.w3.org/1999/xhtml"};
   var bodyAttributes = {};
   var preBodyComponents = [];
   var postBodyComponents = [];
@@ -130,7 +130,7 @@
     var pathToJsonData = "../public/" + dataPaths[page.jsonName];
 
     try {
-      dataAndContext = JSON.parse(fs.readFileSync(process.cwd() + "/public/static/d/" + dataPaths[page.jsonName] + ".json"));
+      dataAndContext = JSON.parse(fs.readFileSync(process.cwd() + "/public/js/p/" + dataPaths[page.jsonName] + ".json"));
     } catch (e) {
       console.log("error", pathToJsonData, e);
       process.exit();
@@ -183,7 +183,7 @@
         return null;
       }
 
-      return chunk;
+      return `/js/${chunk}`;
     });
   })).filter(function (s) {
     return isString(s);
@@ -218,14 +218,14 @@
   });
 
   if (page.jsonName in dataPaths) {
-    var dataPath = pathPrefix + "static/d/" + dataPaths[page.jsonName] + ".json"; // Insert json data path after commons and app
+    var dataPath = pathPrefix + "js/p/" + dataPaths[page.jsonName] + ".json"; // Insert json data path after commons and app
 
     headComponents.splice(1, 0, React.createElement("link", {
       rel: "preload",
       key: dataPath,
       href: dataPath,
-      as: "fetch",
-      crossOrigin: "use-credentials"
+      as: "script",
+      crossorigin: "use-credentials"
     }));
   }
 
@@ -249,7 +249,7 @@
     }
   }));
   var bodyScripts = scripts.map(function (s) {
-    var scriptPath = "" + pathPrefix + (0, _stringify.default)(s).slice(1, -1);
+    var scriptPath = "" + pathPrefix + (0, _stringify.default)(s).slice(1, -1).replace(/\/+/g, "/");
     return React.createElement("script", {
       key: scriptPath,
       src: scriptPath,
--- node_modules/gatsby/dist/bootstrap/index.js
+++ node_modules/gatsby/dist/bootstrap/index.js
@@ -75,7 +75,7 @@
 
     let activity = report.activityTimer(`delete html files from previous builds`);
     activity.start();
-    yield del([`public/*.htm}`, `public/**/*.html`, `!public/static`, `!public/static/**/*.html`]);
+    yield del([`public/*.htm}`, `public/**/*.html`, `!public/js`, `!public/js/**/*.html`]);
     activity.end(); // Try opening the site's gatsby-config.js file.
 
     activity = report.activityTimer(`open and validate gatsby-config`);
@@ -143,7 +143,7 @@
 
     initCache(); // Ensure the public/static directory is created.
 
-    yield fs.ensureDirSync(`${program.directory}/public/static/d`); // Copy our site files to the root of the site.
+    yield fs.ensureDirSync(`${program.directory}/public/js/p`); // Copy our site files to the root of the site.
 
     activity = report.activityTimer(`copy gatsby files`);
     activity.start();
--- node_modules/gatsby/dist/bootstrap/load-plugins/load.js
+++ node_modules/gatsby/dist/bootstrap/load-plugins/load.js
@@ -133,7 +133,7 @@
     }; // Add internal plugins
 
 
-    const internalPlugins = [`../../internal-plugins/dev-404-page`, `../../internal-plugins/load-babel-config`, `../../internal-plugins/component-page-creator`, `../../internal-plugins/internal-data-bridge`, `../../internal-plugins/prod-404`, `../../internal-plugins/query-runner`];
+    const internalPlugins = [`../../internal-plugins/dev-404-page`, `../../internal-plugins/load-babel-config`, `../../internal-plugins/internal-data-bridge`, `../../internal-plugins/prod-404`, `../../internal-plugins/query-runner`];
     internalPlugins.forEach(relPath => {
       const absPath = path.join(__dirname, relPath);
       plugins.push(processPlugin(absPath));
--- node_modules/gatsby/dist/internal-plugins/query-runner/query-runner.js
+++ node_modules/gatsby/dist/internal-plugins/query-runner/query-runner.js
@@ -73,10 +73,10 @@
 
     const resultJSON = JSON.stringify(result);
 
-    const resultHash = require(`crypto`).createHash(`sha1`).update(resultJSON).digest(`base64`) // Remove potentially unsafe characters. This increases chances of collisions
+    const resultHash = require(`crypto`).createHash(`sha1`).update(resultJSON).digest(`hex`) // Remove potentially unsafe characters. This increases chances of collisions
     // slightly but it should still be very safe + we get a shorter
     // url vs hex.
-    .replace(/[^a-zA-Z0-9-_]/g, ``);
+    .slice(0, 6);
 
     let dataPath;
 
@@ -103,9 +103,9 @@
     }
 
     if (resultHashes[queryJob.id] !== resultHash) {
-      resultHashes[queryJob.id] = resultHash; // Always write file to public/static/d/ folder.
+      resultHashes[queryJob.id] = resultHash; // Always write file to public/js/p/ folder.
 
-      const resultPath = path.join(program.directory, `public`, `static`, `d`, `${dataPath}.json`);
+      const resultPath = path.join(program.directory, `public`, `js`, `p`, `${dataPath}.json`);
       yield fs.writeFile(resultPath, resultJSON);
       store.dispatch({
         type: `SET_JSON_DATA_PATH`,
--- node_modules/gatsby/dist/redux/reducers/webpack.js
+++ node_modules/gatsby/dist/redux/reducers/webpack.js
@@ -8,7 +8,6 @@
       {
         let nextConfig = action.payload;
         delete nextConfig.entry;
-        delete nextConfig.output;
         delete nextConfig.target;
         delete nextConfig.resolveLoaders;
         return merge(state, nextConfig);
--- node_modules/gatsby/dist/utils/copy-static-directory.js
+++ node_modules/gatsby/dist/utils/copy-static-directory.js
@@ -7,11 +7,11 @@
 const nodePath = require(`path`);
 
 module.exports = () => {
-  chokidar.watch(`${process.cwd()}/static`).on(`add`, path => {
-    const relativePath = nodePath.relative(`${process.cwd()}/static`, path);
+  chokidar.watch(`${process.cwd()}/src/static`).on(`add`, path => {
+    const relativePath = nodePath.relative(`${process.cwd()}/src/static`, path);
     fs.copy(path, `${process.cwd()}/public/${relativePath}`);
   }).on(`change`, path => {
-    const relativePath = nodePath.relative(`${process.cwd()}/static`, path);
+    const relativePath = nodePath.relative(`${process.cwd()}/src/static`, path);
     fs.copy(path, `${process.cwd()}/public/${relativePath}`);
   });
 };
--- node_modules/gatsby/dist/utils/js-chunk-names.js
+++ node_modules/gatsby/dist/utils/js-chunk-names.js
@@ -2,6 +2,12 @@
 
 var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
 
+var crypto = require("crypto");
+
+var shahash = function shahash(name) {
+  return crypto.createHash("sha1").update(name).digest("hex").slice(0,6);
+}
+
 var _lodash = _interopRequireDefault(require("lodash"));
 
 const path = require(`path`);
@@ -13,7 +19,7 @@
 
 const generatePathChunkName = path => {
   const name = path === `/` ? `index` : kebabHash(path);
-  return `path---${name}`;
+  return `p-${shahash(name)}`;
 };
 
 const generateComponentChunkName = componentPath => {
@@ -25,7 +31,7 @@
   }
 
   const name = path.relative(directory, componentPath);
-  return `component---${_lodash.default.kebabCase(name)}`;
+  return `c/c-${shahash(_lodash.default.kebabCase(name))}`;
 };
 
 exports.generatePathChunkName = generatePathChunkName;
--- node_modules/gatsby/dist/utils/webpack-utils.js
+++ node_modules/gatsby/dist/utils/webpack-utils.js
@@ -33,7 +33,7 @@
     stage,
     program
   }) {
-    const assetRelativeRoot = `static/`;
+    const assetRelativeRoot = `assets/`;
     const vendorRegex = /(node_modules|bower_components)/;
     const supportedBrowsers = program.browserlist;
     const PRODUCTION = !stage.includes(`develop`);
@@ -98,7 +98,7 @@
             sourceMap: !PRODUCTION,
             camelCase: `dashesOnly`,
             // https://github.com/webpack-contrib/css-loader/issues/406
-            localIdentName: `[name]--[local]--[hash:base64:5]`
+            localIdentName: `[sha256:hash:base52:6]`
           }, options)
         };
       },
@@ -136,7 +136,7 @@
         return {
           loader: require.resolve(`url-loader`),
           options: Object.assign({
-            name: `${assetRelativeRoot}[name]-[hash].[ext]`
+            name: `${assetRelativeRoot}[name]-[sha256:hash:base52:6].[ext]`
           }, options)
         };
       },
@@ -145,7 +145,7 @@
           loader: require.resolve(`url-loader`),
           options: Object.assign({
             limit: 10000,
-            name: `${assetRelativeRoot}[name]-[hash].[ext]`
+            name: `${assetRelativeRoot}[name]-[sha256:hash:base52:6].[ext]`
           }, options)
         };
       },
@@ -279,7 +279,7 @@
           modules: true
         }));
         delete rule.exclude;
-        rule.test = /\.module\.css$/;
+        rule.test = /\.css$/;
         return rule;
       };
 
@@ -342,8 +342,8 @@
 
 
     plugins.extractText = options => new MiniCssExtractPlugin(Object.assign({
-      filename: `[name].[chunkhash].css`,
-      chunkFilename: `[name].[chunkhash].css`
+      filename: `css/[name]-[chunkhash].css`,
+      chunkFilename: `[name]-[chunkhash].css`
     }, options));
 
     plugins.moment = () => plugins.ignore(/^\.\/locale$/, /moment$/);
--- node_modules/gatsby/dist/utils/webpack.config.js
+++ node_modules/gatsby/dist/utils/webpack.config.js
@@ -136,8 +136,8 @@
           return {
             filename: `[name]-[chunkhash].js`,
             chunkFilename: `[name]-[chunkhash].js`,
-            path: directoryPath(`public`),
-            publicPath: program.prefixPaths ? `${store.getState().config.pathPrefix}/` : `/`
+            path: directoryPath(`public/js`),
+            publicPath: program.prefixPaths ? `${store.getState().config.pathPrefix}/js/` : `/js/`
           };
 
         default:
@@ -149,7 +149,7 @@
       switch (stage) {
         case `develop`:
           return {
-            commons: [require.resolve(`react-hot-loader/patch`), `${require.resolve(`webpack-hot-middleware/client`)}?path=${getHmrPath()}`, directoryPath(`.cache/app`)]
+            "js/commons": [require.resolve(`react-hot-loader/patch`), `${require.resolve(`webpack-hot-middleware/client`)}?path=${getHmrPath()}`, directoryPath(`.cache/app`)]
           };
 
         case `develop-html`:
@@ -246,7 +246,7 @@
                     }
                   }
 
-                  fs.writeFile(path.join(`public`, `webpack.stats.json`), JSON.stringify({
+                  fs.writeFile(path.join(`public`, `js`, `webpack.stats.json`), JSON.stringify({
                     assetsByChunkName: assets
                   }), done);
                 });
--- node_modules/gatsby/dist/utils/websocket-manager.js
+++ node_modules/gatsby/dist/utils/websocket-manager.js
@@ -15,7 +15,7 @@
   const page = pages.find(p => p.path === pagePath);
   const dataPath = jsonDataPaths[page.jsonName];
   if (typeof dataPath === `undefined`) return undefined;
-  const filePath = path.join(directory, `public`, `static`, `d`, `${dataPath}.json`);
+  const filePath = path.join(directory, `public`, `js`, `p`, `${dataPath}.json`);
   const result = JSON.parse(fs.readFileSync(filePath, `utf-8`));
   return {
     result,
