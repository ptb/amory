--- node_modules/gatsby/cache-dir/develop-static-entry.js
+++ node_modules/gatsby/cache-dir/develop-static-entry.js
@@ -66,7 +66,7 @@
     ]),
     preBodyComponents,
     postBodyComponents: postBodyComponents.concat([
-      <script key={`commons`} src="/commons.js" />,
+      <script key={`commons`} src="/js/b-commons.js" />,
     ]),
   })
   htmlStr = renderToStaticMarkup(htmlElement)
--- node_modules/gatsby/cache-dir/root.js
+++ node_modules/gatsby/cache-dir/root.js
@@ -14,7 +14,7 @@
 // Report runtime errors
 ErrorOverlay.startReportingRuntimeErrors({
   onError: () => {},
-  filename: `/commons.js`,
+  filename: `/js/b-commons.js`,
 })
 ErrorOverlay.setEditorHandler(errorLocation =>
   window.fetch(
--- node_modules/gatsby/cache-dir/static-entry.js
+++ node_modules/gatsby/cache-dir/static-entry.js
@@ -147,8 +147,8 @@
   // Create paths to scripts
   const page = pages.find(page => page.path === locals.path)
   const scripts = [
-    `commons`,
-    `app`,
+    `js/b-commons`,
+    `js/a-appmain`,
     pathChunkName(locals.path),
     page.componentChunkName,
     page.layoutComponentChunkName,
--- node_modules/gatsby/dist/utils/webpack.config.js
+++ node_modules/gatsby/dist/utils/webpack.config.js
@@ -329,7 +329,7 @@
                     // Extract "commons" chunk from the app entry and all
                     // page components.
                     new _webpack2.default.optimize.CommonsChunkPlugin({
-                      name: `commons`,
-                      chunks: [`app`].concat(components),
+                      name: `js/b-commons`,
+                      chunks: [`js/a-appmain`].concat(components),
                       // The more page components there are, the higher we raise the bar
                       // for merging in page-specific JS libs into the commons chunk. The
                       // two principles here is a) keep the TTI (time to interaction) as
@@ -408,7 +408,7 @@
               switch (stage) {
                 case `develop`:
                   return {
-                    commons: [require.resolve(`react-hot-loader/patch`), `${require.resolve(`webpack-hot-middleware/client`)}?path=${program.ssl ? `https` : `http`}://${program.host}:${webpackPort}/__webpack_hmr&reload=true&overlay=false`, directoryPath(`.cache/app`)]
+                    "js/b-commons": [require.resolve(`react-hot-loader/patch`), `${require.resolve(`webpack-hot-middleware/client`)}?path=/__webpack_hmr&reload=true&overlay=false`, directoryPath(`.cache/app`)]
                   };
                 case `develop-html`:
                   return {
@@ -424,7 +424,7 @@
                   };
                 case `build-javascript`:
                   return {
-                    app: directoryPath(`.cache/production-app`)
+                    "js/a-appmain": directoryPath(`.cache/production-app`)
                   };
                 default:
                   throw new Error(`The state requested ${stage} doesn't exist.`);
